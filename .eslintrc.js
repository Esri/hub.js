module.exports = {
  root: true,
  parser: "@typescript-eslint/parser",
  parserOptions: {
    tsconfigRootDir: __dirname,
    project: ["./tsconfig.json"],
    sourceType: "module",
    ecmaVersion: 2020,
  },
  plugins: ["@typescript-eslint"],
  extends: [
    "eslint:recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "./.eslintrc-baseline.js",
  ],
  rules: {
    // Add custom rules here
    "@typescript-eslint/no-unsafe-member-access": "warn",
    "@typescript-eslint/no-empty-function": "warn",
    "@typescript-eslint/no-extra-semi": "warn",
    "@typescript-eslint/no-unsafe-call": "warn",
    "@typescript-eslint/no-unsafe-return": "warn",
    "@typescript-eslint/no-unsafe-assignment": "warn",
    "@typescript-eslint/explicit-function-return-type": "warn",
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/no-unused-vars": ["error", { argsIgnorePattern: "^_" }],
    "no-restricted-imports": [
      "error",
      {
        patterns: [
          {
            group: ["**/dist/**"],
            message: "Importing from a 'dist' directory is not allowed.",
          },
        ],
      },
    ],
    "no-restricted-syntax": [
      "error",
      {
        selector:
          'ExportNamedDeclaration[source] :not([parent.id.name="index.ts"])', // Named exports with a source (re-exports)
        message: "Re-exports are only allowed from the root index.ts file.",
      },
      {
        selector: 'ExportAllDeclaration :not([parent.id.name="index.ts"])', // All exports (re-exports)
        message: "Re-exports are only allowed from the root index.ts file.",
      },
      {
        selector: "TSEnumDeclaration", // Enum declarations
        message:
          "Enums are not allowed. Consider using separate const and type. E.g. const FRUIT = { APPLE: 'apple', BANANA: 'banana' } as const; type Fruit = typeof FRUIT[keyof typeof FRUIT];",
      },
    ],
    "@typescript-eslint/no-require-imports": "error",
  },
  overrides: [
    {
      files: ["**/*.{test,spec}.ts"], // Files for tests
      rules: {
        // Rules specific for test files
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/require-await": "off", // Disable require-await for tests
        "no-unused-vars": "off", // Disable no-unused-vars
        "no-console": "off", // Disable no-console
        "@typescript-eslint/no-unsafe-member-access": "off", // Example rule for tests
        "@typescript-eslint/no-unsafe-assignment": "off", // Example rule for tests
        // ...
      },
    },
    {
      // only the root barrel file is allowed to have re-export statements
      files: ["packages/common/src/index.ts"],
      rules: {
        "no-restricted-syntax": "off",
      },
    },
    {
      // files that are auto-generated by orval
      files: [
        "packages/common/src/events/api/**/*.ts",
        "packages/common/src/newsletters/api/**/*.ts",
        "packages/common/src/newsletters-scheduler/api/**/*.ts",
      ],
      rules: {
        // ignore re-export statements and enums in auto-generated code
        "no-restricted-syntax": "off",
        // ignore errors caused by not auto-generated code not calling `.toString()` on `URLSearchParams` objects
        "@typescript-eslint/restrict-template-expressions": "off",
      },
    },
    {
      // existing enums. please do not add additional enums; they cause tree-shaking issues
      // due to the nature in how they are transpiled to IIFEs and results in unused bytes
      // being bundled by client libraries and applications. A better alternative to enums
      // is to define a separate const and type.
      // e.g.
      //   const FRUIT = { APPLE: 'Apple', BANANA: 'Banana' } as const;
      //   type Fruit = typeof FRUIT[keyof typeof FRUIT]; // union type of enum values
      //   const fruit: Fruit = FRUIT.APPLE;
      //
      // we will be removing the below enums in the future to reduce our bundle sizes
      files: [
        "packages/common/src/content/_internal/enums/datePrecision.ts",
        "packages/common/src/content/enums/jobRecordStatus.ts",
        "packages/common/src/content/enums/jobRecordType.ts",
        "packages/common/src/content/enums/serviceCapabilities.ts",
        "packages/common/src/content/enums/updateFrequency.ts",
        "packages/common/src/core/enums/embedKind.ts",
        "packages/common/src/core/enums/expressionRelationships.ts",
        "packages/common/src/core/enums/featureLayerStyle.ts",
        "packages/common/src/core/enums/metricVisibility.ts",
        "packages/common/src/core/enums/publisherSource.ts",
        "packages/common/src/core/enums/timelineStageStatuses.ts",
        "packages/common/src/core/enums/uiSchemaElementTypes.ts",
        "packages/common/src/core/enums/uiSchemaMessageTypes.ts",
        "packages/common/src/core/enums/uiSchemaRuleEffects.ts",
        "packages/common/src/core/enums/uiSchemaSectionTypes.ts",
        "packages/common/src/core/schemas/internal/metrics/enums/icons.ts",
        "packages/common/src/core/schemas/internal/metrics/enums/layouts.ts",
        "packages/common/src/core/schemas/internal/metrics/enums/scale.ts",
        "packages/common/src/core/schemas/internal/metrics/enums/source.ts",
        "packages/common/src/core/schemas/internal/metrics/enums/unitPositions.ts",
        "packages/common/src/core/schemas/internal/metrics/enums/visualInterest.ts",
        "packages/common/src/core/schemas/shared/enums/alignments.ts",
        "packages/common/src/core/schemas/shared/enums/cardTitleTags.ts",
        "packages/common/src/core/schemas/shared/enums/corners.ts",
        "packages/common/src/core/schemas/shared/enums/dropShadows.ts",
        "packages/common/src/discussions/api/enums/aclCategory.ts",
        "packages/common/src/discussions/api/enums/aclSubCategory.ts",
        "packages/common/src/discussions/api/enums/channelFilter.ts",
        "packages/common/src/discussions/api/enums/channelRelation.ts",
        "packages/common/src/discussions/api/enums/channelSort.ts",
        "packages/common/src/discussions/api/enums/commonSort.ts",
        "packages/common/src/discussions/api/enums/discussionSource.ts",
        "packages/common/src/discussions/api/enums/discussionType.ts",
        "packages/common/src/discussions/api/enums/entitySettingsType.ts",
        "packages/common/src/discussions/api/enums/postReaction.ts",
        "packages/common/src/discussions/api/enums/postRelation.ts",
        "packages/common/src/discussions/api/enums/postSort.ts",
        "packages/common/src/discussions/api/enums/postStatus.ts",
        "packages/common/src/discussions/api/enums/postType.ts",
        "packages/common/src/discussions/api/enums/reactionRelation.ts",
        "packages/common/src/discussions/api/enums/role.ts",
        "packages/common/src/discussions/api/enums/searchPostsFormat.ts",
        "packages/common/src/discussions/api/enums/sharingAccess.ts",
        "packages/common/src/discussions/api/enums/sortOrder.ts",
        "packages/common/src/downloads/enums/downloadOperationStatus.ts",
        "packages/common/src/downloads/enums/serviceDownloadFormat.ts",
        "packages/common/src/enums/fileExtension.ts",
        "packages/common/src/enums/hubEntityHero.ts",
        "packages/common/src/enums/hubEntityStatus.ts",
        "packages/common/src/enums/itemType.ts",
        "packages/common/src/events/enums/hubEventAttendanceType.ts",
        "packages/common/src/events/enums/hubEventCapacityType.ts",
        "packages/common/src/sites/_internal/enums/searchCategories.ts",
      ],
      rules: {
        "no-restricted-syntax": "off",
      },
    },
  ],
};
