/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * Hub Events Service
 * OpenAPI spec version: 0.0.1
 */
import { customClient } from "../custom-client";
/**
 * Status of the registration
 */
export type UpdateRegistrationDtoStatus =
  (typeof UpdateRegistrationDtoStatus)[keyof typeof UpdateRegistrationDtoStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateRegistrationDtoStatus = {
  PENDING: "PENDING",
  ACCEPTED: "ACCEPTED",
  DECLINED: "DECLINED",
  BLOCKED: "BLOCKED",
} as const;

/**
 * Role of the user in the event
 */
export type UpdateRegistrationDtoRole =
  (typeof UpdateRegistrationDtoRole)[keyof typeof UpdateRegistrationDtoRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateRegistrationDtoRole = {
  OWNER: "OWNER",
  ORGANIZER: "ORGANIZER",
  ATTENDEE: "ATTENDEE",
} as const;

export interface UpdateRegistrationDto {
  /** Role of the user in the event */
  role?: UpdateRegistrationDtoRole;
  /** Status of the registration */
  status?: UpdateRegistrationDtoStatus;
}

/**
 * Role of the user in the event
 */
export type CreateRegistrationDtoRole =
  (typeof CreateRegistrationDtoRole)[keyof typeof CreateRegistrationDtoRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateRegistrationDtoRole = {
  OWNER: "OWNER",
  ORGANIZER: "ORGANIZER",
  ATTENDEE: "ATTENDEE",
} as const;

export interface CreateRegistrationDto {
  /** ArcGIS Online id for a user. Will always be extracted from the token unless service token is used. */
  agoId?: string;
  /** Email for the subscriber. Will always be extracted from the token unless service token is used. */
  email?: string;
  /** Event id being registered for */
  eventId: string;
  /** First name for the subscriber. Will always be extracted from the token unless service token is used. */
  firstName?: string;
  /** Last name for the subscriber. Will always be extracted from the token unless service token is used. */
  lastName?: string;
  /** Role of the user in the event */
  role?: CreateRegistrationDtoRole;
  /** Username for the subscriber. Will always be extracted from the token unless service token is used. */
  username?: string;
}

export interface UpdateEventDto {
  [key: string]: any;
}

export type IRegistrationStatus =
  (typeof IRegistrationStatus)[keyof typeof IRegistrationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IRegistrationStatus = {
  PENDING: "PENDING",
  ACCEPTED: "ACCEPTED",
  DECLINED: "DECLINED",
  BLOCKED: "BLOCKED",
} as const;

export type IRegistrationRole =
  (typeof IRegistrationRole)[keyof typeof IRegistrationRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IRegistrationRole = {
  OWNER: "OWNER",
  ORGANIZER: "ORGANIZER",
  ATTENDEE: "ATTENDEE",
} as const;

export type IEventStatus = (typeof IEventStatus)[keyof typeof IEventStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IEventStatus = {
  PLANNED: "PLANNED",
  CANCELED: "CANCELED",
  REMOVED: "REMOVED",
} as const;

export type IEventAttendanceTypeItem =
  (typeof IEventAttendanceTypeItem)[keyof typeof IEventAttendanceTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const IEventAttendanceTypeItem = {
  VIRTUAL: "VIRTUAL",
  IN_PERSON: "IN_PERSON",
} as const;

export interface IUser {
  agoId: string;
  createdAt: string;
  deleted: boolean;
  email: string;
  firstName: string;
  lastName: string;
  optedOut: boolean;
  updatedAt: string;
  username: string;
}

export interface IEvent {
  allDay: boolean;
  attendanceType: IEventAttendanceTypeItem[];
  capacity: number | null;
  catalog: string[] | null;
  createdAt: string;
  createdById: string;
  creator?: IUser;
  description: string | null;
  endDateTime: string;
  id: string;
  locations: string[];
  notifyAttendees: boolean;
  onlineLocations: string[];
  recurrence: string | null;
  registrations?: IRegistration[];
  startDateTime: string;
  status: IEventStatus;
  summary: string;
  timeZone: string;
  title: string;
  updatedAt: string;
}

export interface IRegistration {
  createdAt: string;
  createdById: string;
  event?: IEvent;
  eventId: string;
  id: number;
  role: IRegistrationRole;
  status: IRegistrationStatus;
  updatedAt: string;
  user?: IUser;
  userId: string;
}

export type CreateEventDtoLocationsItem = { [key: string]: any };

export type CreateEventDtoAttendanceTypeItem =
  (typeof CreateEventDtoAttendanceTypeItem)[keyof typeof CreateEventDtoAttendanceTypeItem];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateEventDtoAttendanceTypeItem = {
  VIRTUAL: "VIRTUAL",
  IN_PERSON: "IN_PERSON",
} as const;

export interface CreateEventDto {
  /** ArcGIS Online id for a user. Will always be extracted from the token unless service token is used. */
  agoId?: string;
  /** Flag for all day event */
  allDay?: boolean;
  /** Type of event */
  attendanceType: CreateEventDtoAttendanceTypeItem[];
  /** Capacity of the event. Minimum value is 1 */
  capacity?: number;
  /** Description of the event */
  description?: string;
  /** Email for the subscriber. Will always be extracted from the token unless service token is used. */
  email?: string;
  /** ISO8601 end date-time for the event */
  endDateTime: string;
  /** First name for the subscriber. Will always be extracted from the token unless service token is used. */
  firstName?: string;
  /** Last name for the subscriber. Will always be extracted from the token unless service token is used. */
  lastName?: string;
  /** Array of geojson objects for the event locations */
  locations: CreateEventDtoLocationsItem[];
  /** Flag to notify attendees */
  notifyAttendees?: boolean;
  /** Online locations for the event */
  onlineLocations?: string[];
  /** ISO8601 start date-time for the event */
  startDateTime: string;
  /** Summary of the event */
  summary: string;
  /** IANA time zone for the event */
  timeZone: string;
  /** Title of the event */
  title: string;
  /** Username for the subscriber. Will always be extracted from the token unless service token is used. */
  username?: string;
}

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const createEvent = (
  createEventDto: CreateEventDto,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IEvent>(
    {
      url: `/api/events/v1/events`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createEventDto,
    },
    options
  );
};

export const getEvents = (options?: SecondParameter<typeof customClient>) => {
  return customClient<void>(
    { url: `/api/events/v1/events`, method: "GET" },
    options
  );
};

export const getEvent = (
  id: string,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IEvent>(
    { url: `/api/events/v1/events/${id}`, method: "GET" },
    options
  );
};

export const updateEvent = (
  id: string,
  updateEventDto: UpdateEventDto,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<void>(
    {
      url: `/api/events/v1/events/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateEventDto,
    },
    options
  );
};

export const deleteEvent = (
  id: string,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IEvent>(
    { url: `/api/events/v1/events/${id}`, method: "DELETE" },
    options
  );
};

export const createRegistration = (
  createRegistrationDto: CreateRegistrationDto,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IRegistration>(
    {
      url: `/api/events/v1/registrations`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createRegistrationDto,
    },
    options
  );
};

export const getRegistrations = (
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IRegistration[]>(
    { url: `/api/events/v1/registrations`, method: "GET" },
    options
  );
};

export const getRegistration = (
  id: number,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IRegistration>(
    { url: `/api/events/v1/registrations/${id}`, method: "GET" },
    options
  );
};

export const updateRegistration = (
  id: number,
  updateRegistrationDto: UpdateRegistrationDto,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IRegistration>(
    {
      url: `/api/events/v1/registrations/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateRegistrationDto,
    },
    options
  );
};

export const deleteRegistration = (
  id: number,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IRegistration>(
    { url: `/api/events/v1/registrations/${id}`, method: "DELETE" },
    options
  );
};

export const confirmRegistration = (
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<void>(
    { url: `/api/events/v1/registrations/confirmation`, method: "GET" },
    options
  );
};

export type CreateEventResult = NonNullable<
  Promise<ReturnType<typeof createEvent>>
>;
export type GetEventsResult = NonNullable<
  Promise<ReturnType<typeof getEvents>>
>;
export type GetEventResult = NonNullable<Promise<ReturnType<typeof getEvent>>>;
export type UpdateEventResult = NonNullable<
  Promise<ReturnType<typeof updateEvent>>
>;
export type DeleteEventResult = NonNullable<
  Promise<ReturnType<typeof deleteEvent>>
>;
export type CreateRegistrationResult = NonNullable<
  Promise<ReturnType<typeof createRegistration>>
>;
export type GetRegistrationsResult = NonNullable<
  Promise<ReturnType<typeof getRegistrations>>
>;
export type GetRegistrationResult = NonNullable<
  Promise<ReturnType<typeof getRegistration>>
>;
export type UpdateRegistrationResult = NonNullable<
  Promise<ReturnType<typeof updateRegistration>>
>;
export type DeleteRegistrationResult = NonNullable<
  Promise<ReturnType<typeof deleteRegistration>>
>;
export type ConfirmRegistrationResult = NonNullable<
  Promise<ReturnType<typeof confirmRegistration>>
>;
