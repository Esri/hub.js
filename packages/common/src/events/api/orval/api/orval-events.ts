/**
 * Generated by orval v6.24.0 üç∫
 * Do not edit manually.
 * Hub Events Service
 * OpenAPI spec version: 0.0.1
 */

/* tslint:disable:interface-over-type-literal */
import { AsyncReturnType } from "../async-return-type";
import { customClient } from "../custom-client";
export type GetEventsParams = {
  /**
   * Include registrations with each event
   */
  includeRegistrations?: boolean;
  /**
   * Include creator with each event
   */
  includeCreator?: boolean;
  /**
   * latest ISO8601 start date-time for the events
   */
  startDateTimeBefore?: string;
  /**
   * earliest ISO8601 start date-time for the events
   */
  startDateTimeAfter?: string;
  /**
   * the max amount of events to return
   */
  num?: number;
  /**
   * the index to start at
   */
  start?: number;
};

export interface IUpdateEvent {
  [key: string]: any;
}

export type IAddressLocation = { [key: string]: any };

export type IAddressExtent = { [key: string]: any };

export interface IAddress {
  address: string;
  address2: string | null;
  capacity: number | null;
  createdAt: string;
  description: string | null;
  event?: IEvent;
  eventId: string;
  extent: IAddressExtent;
  geoAddress: string;
  geoAddrType: string;
  geoScore: number;
  id: string;
  location: IAddressLocation;
  updatedAt: string;
  venue: string | null;
}

export type IEventGeometry = { [key: string]: any } | null;

export type IEventCatalogItem = { [key: string]: any };

export enum EventStatus {
  PLANNED = "PLANNED",
  CANCELED = "CANCELED",
  REMOVED = "REMOVED",
}
export enum RegistrationStatus {
  PENDING = "PENDING",
  ACCEPTED = "ACCEPTED",
  DECLINED = "DECLINED",
  BLOCKED = "BLOCKED",
}
export enum RegistrationRole {
  OWNER = "OWNER",
  ORGANIZER = "ORGANIZER",
  ATTENDEE = "ATTENDEE",
}
export interface IUpdateRegistration {
  /** Role of the user in the event */
  role?: RegistrationRole;
  /** Status of the registration */
  status?: RegistrationStatus;
}

export interface ICreateRegistration {
  /** ArcGIS Online id for a user. Will always be extracted from the token unless service token is used. */
  agoId?: string;
  /** Email for the subscriber. Will always be extracted from the token unless service token is used. */
  email?: string;
  /** Event id being registered for */
  eventId: string;
  /** First name for the subscriber. Will always be extracted from the token unless service token is used. */
  firstName?: string;
  /** Last name for the subscriber. Will always be extracted from the token unless service token is used. */
  lastName?: string;
  /** Role of the user in the event */
  role?: RegistrationRole;
  /** Username for the subscriber. Will always be extracted from the token unless service token is used. */
  username?: string;
}

export interface IUser {
  agoId: string;
  createdAt: string;
  deleted: boolean;
  email: string;
  firstName: string;
  lastName: string;
  optedOut: boolean;
  updatedAt: string;
  username: string;
}

export interface IRegistration {
  createdAt: string;
  createdBy?: IUser;
  createdById: string;
  event?: IEvent;
  eventId: string;
  id: number;
  role: RegistrationRole;
  status: RegistrationStatus;
  updatedAt: string;
  user?: IUser;
  userId: string;
}

/**
 * GeoJSON formatted geometry related to the event
 */
export type ICreateEventGeometry = { [key: string]: any };

export enum EventAttendanceType {
  VIRTUAL = "VIRTUAL",
  IN_PERSON = "IN_PERSON",
}
export interface IEvent {
  addresses?: IAddress[];
  allDay: boolean;
  attendanceType: EventAttendanceType[];
  catalog: IEventCatalogItem[] | null;
  createdAt: string;
  createdById: string;
  creator?: IUser;
  description: string | null;
  endDateTime: string;
  geometry: IEventGeometry;
  id: string;
  notifyAttendees: boolean;
  onlineLocations: string[];
  recurrence: string | null;
  registrations?: IRegistration[];
  startDateTime: string;
  status: EventStatus;
  summary: string | null;
  timeZone: string;
  title: string;
  updatedAt: string;
}

export interface ICreateAddress {
  /** Street address */
  address: string;
  /** Secondary address information (room, etc) */
  address2?: string;
  /** Capacity of this location. Minimum value is 1 */
  capacity?: number;
  /** Description for the address */
  description?: string;
  /** Venue information for the address */
  venue?: string;
}

export interface ICreateEvent {
  addresses?: ICreateAddress[];
  /** ArcGIS Online id for a user. Will always be extracted from the token unless service token is used. */
  agoId?: string;
  /** Flag for all day event */
  allDay?: boolean;
  /** Type of event */
  attendanceType: EventAttendanceType[];
  /** Description of the event */
  description?: string;
  /** Email for the subscriber. Will always be extracted from the token unless service token is used. */
  email?: string;
  /** ISO8601 end date-time for the event */
  endDateTime: string;
  /** First name for the subscriber. Will always be extracted from the token unless service token is used. */
  firstName?: string;
  /** GeoJSON formatted geometry related to the event */
  geometry?: ICreateEventGeometry;
  /** Last name for the subscriber. Will always be extracted from the token unless service token is used. */
  lastName?: string;
  /** Flag to notify attendees */
  notifyAttendees?: boolean;
  /** Online locations for the event */
  onlineLocations?: string[];
  /** ISO8601 start date-time for the event */
  startDateTime: string;
  /** Summary of the event */
  summary?: string;
  /** IANA time zone for the event */
  timeZone: string;
  /** Title of the event */
  title: string;
  /** Username for the subscriber. Will always be extracted from the token unless service token is used. */
  username?: string;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const createEvent = (
  iCreateEvent: ICreateEvent,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IEvent>(
    {
      url: `/api/events/v1/events`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: iCreateEvent,
    },
    options
  );
};

export const getEvents = (
  params?: GetEventsParams,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IEvent[]>(
    { url: `/api/events/v1/events`, method: "GET", params },
    options
  );
};

export const getEvent = (
  id: string,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IEvent>(
    { url: `/api/events/v1/events/${id}`, method: "GET" },
    options
  );
};

export const updateEvent = (
  id: string,
  iUpdateEvent: IUpdateEvent,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IEvent>(
    {
      url: `/api/events/v1/events/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: iUpdateEvent,
    },
    options
  );
};

export const deleteEvent = (
  id: string,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IEvent>(
    { url: `/api/events/v1/events/${id}`, method: "DELETE" },
    options
  );
};

export const createRegistration = (
  iCreateRegistration: ICreateRegistration,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IRegistration>(
    {
      url: `/api/events/v1/registrations`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: iCreateRegistration,
    },
    options
  );
};

export const getRegistrations = (
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IRegistration[]>(
    { url: `/api/events/v1/registrations`, method: "GET" },
    options
  );
};

export const getRegistration = (
  id: number,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IRegistration>(
    { url: `/api/events/v1/registrations/${id}`, method: "GET" },
    options
  );
};

export const updateRegistration = (
  id: number,
  iUpdateRegistration: IUpdateRegistration,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IRegistration>(
    {
      url: `/api/events/v1/registrations/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: iUpdateRegistration,
    },
    options
  );
};

export const deleteRegistration = (
  id: number,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IRegistration>(
    { url: `/api/events/v1/registrations/${id}`, method: "DELETE" },
    options
  );
};

export type CreateEventResult = NonNullable<
  AsyncReturnType<typeof createEvent>
>;
export type GetEventsResult = NonNullable<AsyncReturnType<typeof getEvents>>;
export type GetEventResult = NonNullable<AsyncReturnType<typeof getEvent>>;
export type UpdateEventResult = NonNullable<
  AsyncReturnType<typeof updateEvent>
>;
export type DeleteEventResult = NonNullable<
  AsyncReturnType<typeof deleteEvent>
>;
export type CreateRegistrationResult = NonNullable<
  AsyncReturnType<typeof createRegistration>
>;
export type GetRegistrationsResult = NonNullable<
  AsyncReturnType<typeof getRegistrations>
>;
export type GetRegistrationResult = NonNullable<
  AsyncReturnType<typeof getRegistration>
>;
export type UpdateRegistrationResult = NonNullable<
  AsyncReturnType<typeof updateRegistration>
>;
export type DeleteRegistrationResult = NonNullable<
  AsyncReturnType<typeof deleteRegistration>
>;
