/**
 * Generated by orval v6.24.0 üç∫
 * Do not edit manually.
 * Hub Events Service
 * OpenAPI spec version: 0.0.1
 */
import { customClient } from "../custom-client";
export interface IUpdateRegistration {
  /** Role of the user in the event */
  role?: RegistrationRole;
  /** Status of the registration */
  status?: RegistrationStatus;
}

export interface ICreateRegistration {
  /** ArcGIS Online id for a user. Will always be extracted from the token unless service token is used. */
  agoId?: string;
  /** Email for the subscriber. Will always be extracted from the token unless service token is used. */
  email?: string;
  /** Event id being registered for */
  eventId: string;
  /** First name for the subscriber. Will always be extracted from the token unless service token is used. */
  firstName?: string;
  /** Last name for the subscriber. Will always be extracted from the token unless service token is used. */
  lastName?: string;
  /** Role of the user in the event */
  role?: RegistrationRole;
  /** Username for the subscriber. Will always be extracted from the token unless service token is used. */
  username?: string;
}

export interface IUpdateEvent {
  [key: string]: any;
}

export type EventStatus = (typeof EventStatus)[keyof typeof EventStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventStatus = {
  PLANNED: "PLANNED",
  CANCELED: "CANCELED",
  REMOVED: "REMOVED",
} as const;

export type RegistrationStatus =
  (typeof RegistrationStatus)[keyof typeof RegistrationStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RegistrationStatus = {
  PENDING: "PENDING",
  ACCEPTED: "ACCEPTED",
  DECLINED: "DECLINED",
  BLOCKED: "BLOCKED",
} as const;

export type RegistrationRole =
  (typeof RegistrationRole)[keyof typeof RegistrationRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RegistrationRole = {
  OWNER: "OWNER",
  ORGANIZER: "ORGANIZER",
  ATTENDEE: "ATTENDEE",
} as const;

export interface IUser {
  agoId: string;
  createdAt: string;
  deleted: boolean;
  email: string;
  firstName: string;
  lastName: string;
  optedOut: boolean;
  updatedAt: string;
  username: string;
}

export interface IRegistration {
  createdAt: string;
  createdById: string;
  event?: IEvent;
  eventId: string;
  id: number;
  role: RegistrationRole;
  status: RegistrationStatus;
  updatedAt: string;
  user?: IUser;
  userId: string;
}

// export type ICreateEventLocationsItem = { [key: string]: any };

export type EventAttendanceType =
  (typeof EventAttendanceType)[keyof typeof EventAttendanceType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventAttendanceType = {
  VIRTUAL: "VIRTUAL",
  IN_PERSON: "IN_PERSON",
} as const;

export interface IEvent {
  allDay: boolean;
  attendanceType: EventAttendanceType[];
  capacity: number | null;
  catalog: string[] | null;
  createdAt: string;
  createdById: string;
  creator?: IUser;
  description: string | null;
  endDateTime: string;
  id: string;
  locations: string[];
  notifyAttendees: boolean;
  onlineLocations: string[];
  recurrence: string | null;
  registrations?: IRegistration[];
  startDateTime: string;
  status: EventStatus;
  summary: string;
  timeZone: string;
  title: string;
  updatedAt: string;
}

export interface ICreateEvent {
  /** ArcGIS Online id for a user. Will always be extracted from the token unless service token is used. */
  agoId?: string;
  /** Flag for all day event */
  allDay?: boolean;
  /** Type of event */
  attendanceType: EventAttendanceType[];
  /** Capacity of the event. Minimum value is 1 */
  capacity?: number;
  /** Description of the event */
  description?: string;
  /** Email for the subscriber. Will always be extracted from the token unless service token is used. */
  email?: string;
  /** ISO8601 end date-time for the event */
  endDateTime: string;
  /** First name for the subscriber. Will always be extracted from the token unless service token is used. */
  firstName?: string;
  /** Last name for the subscriber. Will always be extracted from the token unless service token is used. */
  lastName?: string;
  /** Array of geojson objects for the event locations */
  locations: ICreateEventLocationsItem[];
  /** Flag to notify attendees */
  notifyAttendees?: boolean;
  /** Online locations for the event */
  onlineLocations?: string[];
  /** ISO8601 start date-time for the event */
  startDateTime: string;
  /** Summary of the event */
  summary: string;
  /** IANA time zone for the event */
  timeZone: string;
  /** Title of the event */
  title: string;
  /** Username for the subscriber. Will always be extracted from the token unless service token is used. */
  username?: string;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const createEvent = (
  iCreateEvent: ICreateEvent,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IEvent>(
    {
      url: `/api/events/v1/events`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: iCreateEvent,
    },
    options
  );
};

export const getEvents = (options?: SecondParameter<typeof customClient>) => {
  return customClient<IEvent[]>(
    { url: `/api/events/v1/events`, method: "GET" },
    options
  );
};

export const getEvent = (
  id: string,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IEvent>(
    { url: `/api/events/v1/events/${id}`, method: "GET" },
    options
  );
};

export const updateEvent = (
  id: string,
  iUpdateEvent: IUpdateEvent,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IEvent>(
    {
      url: `/api/events/v1/events/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: iUpdateEvent,
    },
    options
  );
};

export const deleteEvent = (
  id: string,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IEvent>(
    { url: `/api/events/v1/events/${id}`, method: "DELETE" },
    options
  );
};

export const createRegistration = (
  iCreateRegistration: ICreateRegistration,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IRegistration>(
    {
      url: `/api/events/v1/registrations`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: iCreateRegistration,
    },
    options
  );
};

export const getRegistrations = (
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IRegistration[]>(
    { url: `/api/events/v1/registrations`, method: "GET" },
    options
  );
};

export const getRegistration = (
  id: number,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IRegistration>(
    { url: `/api/events/v1/registrations/${id}`, method: "GET" },
    options
  );
};

export const updateRegistration = (
  id: number,
  iUpdateRegistration: IUpdateRegistration,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IRegistration>(
    {
      url: `/api/events/v1/registrations/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: iUpdateRegistration,
    },
    options
  );
};

export const deleteRegistration = (
  id: number,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IRegistration>(
    { url: `/api/events/v1/registrations/${id}`, method: "DELETE" },
    options
  );
};

export const confirmRegistration = (
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<void>(
    { url: `/api/events/v1/registrations/confirmation`, method: "GET" },
    options
  );
};

export type CreateEventResult = NonNullable<
  Promise<ReturnType<typeof createEvent>>
>;
export type GetEventsResult = NonNullable<
  Promise<ReturnType<typeof getEvents>>
>;
export type GetEventResult = NonNullable<Promise<ReturnType<typeof getEvent>>>;
export type UpdateEventResult = NonNullable<
  Promise<ReturnType<typeof updateEvent>>
>;
export type DeleteEventResult = NonNullable<
  Promise<ReturnType<typeof deleteEvent>>
>;
export type CreateRegistrationResult = NonNullable<
  Promise<ReturnType<typeof createRegistration>>
>;
export type GetRegistrationsResult = NonNullable<
  Promise<ReturnType<typeof getRegistrations>>
>;
export type GetRegistrationResult = NonNullable<
  Promise<ReturnType<typeof getRegistration>>
>;
export type UpdateRegistrationResult = NonNullable<
  Promise<ReturnType<typeof updateRegistration>>
>;
export type DeleteRegistrationResult = NonNullable<
  Promise<ReturnType<typeof deleteRegistration>>
>;
export type ConfirmRegistrationResult = NonNullable<
  Promise<ReturnType<typeof confirmRegistration>>
>;
