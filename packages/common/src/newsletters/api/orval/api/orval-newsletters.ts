/* tslint:disable:interface-over-type-literal */
import { Awaited } from "../awaited-type";

/**
 * Generated by orval v6.24.0 üç∫
 * Do not edit manually.
 * Hub Newsletters Service
 * OpenAPI spec version: 0.0.1
 */
import { customClient } from "../custom-client";
export type GetSubscriptionsParams = {
  /**
   * Optional array of matching notification spec names to filter by
   */
  names?: string[];
  /**
   * Optional cadence to filter by
   */
  cadence?: Cadence;
  /**
   * Optional user id to filter by. Note this gets extracted/overridden from AGO token if provided
   */
  userId?: string;
  /**
   * Optional flag for filtering active subscriptions
   */
  active?: boolean;
};

export interface IUpdateNotificationSpec {
  /** Description of the notification spec */
  description?: string;
  /** Name identifier for the notification spec */
  name?: string;
}

export interface ICreateNotificationSpec {
  /** Description of the notification spec */
  description?: string;
  /** Name identifier for the notification spec */
  name: string;
}

export interface IUpdateUser {
  /** Flag for deleted user */
  deleted?: boolean;
  /** Email for the subscriber. Will always be extracted from the token unless service token is used. */
  email?: string;
  /** First name for the subscriber. Will always be extracted from the token unless service token is used. */
  firstName?: string;
  /** Last name for the subscriber. Will always be extracted from the token unless service token is used. */
  lastName?: string;
  /** Flag for unsubscribed user */
  optedOut?: boolean;
  /** Username for the subscriber. Will always be extracted from the token unless service token is used. */
  username?: string;
}

export interface ICreateUser {
  /** ArcGIS Online id for a user. Will always be extracted from the token unless service token is used. */
  agoId?: string;
  /** Flag for deleted user */
  deleted?: boolean;
  /** Email for the subscriber. Will always be extracted from the token unless service token is used. */
  email?: string;
  /** First name for the subscriber. Will always be extracted from the token unless service token is used. */
  firstName?: string;
  /** Last name for the subscriber. Will always be extracted from the token unless service token is used. */
  lastName?: string;
  /** Flag for unsubscribed user */
  optedOut?: boolean;
  /** Username for the subscriber. Will always be extracted from the token unless service token is used. */
  username?: string;
}

/**
 * Metadata for the subscription
 */
export type ISubscribeMetadata =
  | ICreateEventMetadata
  | ICreateTelemetryReportMetadata;

export type ISubscriptionMetadata = { [key: string]: any };

export interface IUser {
  agoId: string;
  createdAt: string;
  deleted: boolean;
  email: string;
  firstName: string;
  lastName: string;
  optedOut: boolean;
  updatedAt: string;
  username: string;
}

export interface INotificationSpec {
  createdAt: string;
  createdById: string;
  description: string;
  id: number;
  name: string;
  updatedAt: string;
}

/**
 * Metadata for the subscription
 */
export type ICreateSubscriptionMetadata =
  | ICreateEventMetadata
  | ICreateTelemetryReportMetadata;

export enum DeliveryMethod {
  EMAIL = "EMAIL",
}
export enum Cadence {
  ON_EVENT = "ON_EVENT",
  DAILY = "DAILY",
  WEEKLY = "WEEKLY",
  MONTHLY = "MONTHLY",
}
export interface IUpdateSubscription {
  /** Flag to opt user in or out of subscription */
  active?: boolean;
  /** Frequency of the subscription */
  cadence?: Cadence;
  /** Delivery method for subscription, ie email or text */
  deliveryMethod?: DeliveryMethod;
  /** Last delivered datetime string of the subscription in ISO 8601 format */
  lastDelivery?: string;
  /** ArcGIS Online id for a user. Will always be extracted from the token unless service token is used. */
  userId?: string;
}

export interface ISubscription {
  active: boolean;
  cadence: Cadence;
  createdAt: string;
  deliveryMethod: DeliveryMethod;
  id: number;
  lastDelivery: string;
  metadata: ISubscriptionMetadata;
  notificationSpec?: INotificationSpec;
  notificationSpecId: number;
  updatedAt: string;
  user?: IUser;
  userId: string;
}

export enum SystemNotificationSpecNames {
  TELEMETRY_REPORT = "TELEMETRY_REPORT",
  EVENT = "EVENT",
}
export interface ISubscribe {
  /** ArcGIS Online id for a user. Will always be extracted from the token unless service token is used. */
  agoId?: string;
  /** Frequency of the subscription */
  cadence: Cadence;
  /** Flag for deleted user */
  deleted?: boolean;
  /** Delivery method for subscription, ie email or text */
  deliveryMethod: DeliveryMethod;
  /** Email for the subscriber. Will always be extracted from the token unless service token is used. */
  email?: string;
  /** First name for the subscriber. Will always be extracted from the token unless service token is used. */
  firstName?: string;
  /** Last name for the subscriber. Will always be extracted from the token unless service token is used. */
  lastName?: string;
  /** Metadata for the subscription */
  metadata: ISubscribeMetadata;
  /** Notification spec name for the subscription */
  notificationSpecName: SystemNotificationSpecNames;
  /** Flag for unsubscribed user */
  optedOut?: boolean;
  /** Username for the subscriber. Will always be extracted from the token unless service token is used. */
  username?: string;
}

export interface ICreateSubscription {
  /** Frequency of the subscription */
  cadence: Cadence;
  /** Delivery method for subscription, ie email or text */
  deliveryMethod: DeliveryMethod;
  /** Metadata for the subscription */
  metadata: ICreateSubscriptionMetadata;
  /** Notification spec name for the subscription */
  notificationSpecName: SystemNotificationSpecNames;
  /** AGO id for user which subscription belongs to */
  userId: string;
}

export interface ICreateEventMetadata {
  /** Event id for the subscription */
  eventId: string;
}

export interface ICreateTelemetryReportMetadata {
  /** Hostname for telemetry report. */
  hostname: string;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const createSubscription = (
  iCreateSubscription: ICreateSubscription,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<ISubscription>(
    {
      url: `/api/newsletters/v1/subscriptions`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: iCreateSubscription,
    },
    options
  );
};

export const getSubscriptions = (
  params?: GetSubscriptionsParams,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<ISubscription[]>(
    { url: `/api/newsletters/v1/subscriptions`, method: "GET", params },
    options
  );
};

export const subscribe = (
  iSubscribe: ISubscribe,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<ISubscription>(
    {
      url: `/api/newsletters/v1/subscriptions/subscribe`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: iSubscribe,
    },
    options
  );
};

export const getSubscription = (
  id: number,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<ISubscription>(
    { url: `/api/newsletters/v1/subscriptions/${id}`, method: "GET" },
    options
  );
};

export const updateSubscription = (
  id: number,
  iUpdateSubscription: IUpdateSubscription,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<ISubscription>(
    {
      url: `/api/newsletters/v1/subscriptions/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: iUpdateSubscription,
    },
    options
  );
};

export const deleteSubscription = (
  id: number,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<ISubscription>(
    { url: `/api/newsletters/v1/subscriptions/${id}`, method: "DELETE" },
    options
  );
};

export const createUser = (
  iCreateUser: ICreateUser,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IUser>(
    {
      url: `/api/newsletters/v1/users`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: iCreateUser,
    },
    options
  );
};

export const getUsers = (options?: SecondParameter<typeof customClient>) => {
  return customClient<IUser[]>(
    { url: `/api/newsletters/v1/users`, method: "GET" },
    options
  );
};

export const getUser = (
  userId: string,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IUser>(
    { url: `/api/newsletters/v1/users/${userId}`, method: "GET" },
    options
  );
};

export const updateUser = (
  userId: string,
  iUpdateUser: IUpdateUser,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IUser>(
    {
      url: `/api/newsletters/v1/users/${userId}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: iUpdateUser,
    },
    options
  );
};

export const deleteUser = (
  userId: string,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<IUser>(
    { url: `/api/newsletters/v1/users/${userId}`, method: "DELETE" },
    options
  );
};

export const createNotificationSpec = (
  iCreateNotificationSpec: ICreateNotificationSpec,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<INotificationSpec>(
    {
      url: `/api/newsletters/v1/notification-specs`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: iCreateNotificationSpec,
    },
    options
  );
};

export const getNotificationSpecs = (
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<INotificationSpec[]>(
    { url: `/api/newsletters/v1/notification-specs`, method: "GET" },
    options
  );
};

export const getNotificationSpec = (
  id: number,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<INotificationSpec>(
    { url: `/api/newsletters/v1/notification-specs/${id}`, method: "GET" },
    options
  );
};

export const updateNotificationSpec = (
  id: number,
  iUpdateNotificationSpec: IUpdateNotificationSpec,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<INotificationSpec>(
    {
      url: `/api/newsletters/v1/notification-specs/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: iUpdateNotificationSpec,
    },
    options
  );
};

export const deleteNotificationSpec = (
  id: number,
  options?: SecondParameter<typeof customClient>
) => {
  return customClient<INotificationSpec>(
    { url: `/api/newsletters/v1/notification-specs/${id}`, method: "DELETE" },
    options
  );
};

export type CreateSubscriptionResult = NonNullable<
  Awaited<ReturnType<typeof createSubscription>>
>;
export type GetSubscriptionsResult = NonNullable<
  Awaited<ReturnType<typeof getSubscriptions>>
>;
export type SubscribeResult = NonNullable<
  Awaited<ReturnType<typeof subscribe>>
>;
export type GetSubscriptionResult = NonNullable<
  Awaited<ReturnType<typeof getSubscription>>
>;
export type UpdateSubscriptionResult = NonNullable<
  Awaited<ReturnType<typeof updateSubscription>>
>;
export type DeleteSubscriptionResult = NonNullable<
  Awaited<ReturnType<typeof deleteSubscription>>
>;
export type CreateUserResult = NonNullable<
  Awaited<ReturnType<typeof createUser>>
>;
export type GetUsersResult = NonNullable<Awaited<ReturnType<typeof getUsers>>>;
export type GetUserResult = NonNullable<Awaited<ReturnType<typeof getUser>>>;
export type UpdateUserResult = NonNullable<
  Awaited<ReturnType<typeof updateUser>>
>;
export type DeleteUserResult = NonNullable<
  Awaited<ReturnType<typeof deleteUser>>
>;
export type CreateNotificationSpecResult = NonNullable<
  Awaited<ReturnType<typeof createNotificationSpec>>
>;
export type GetNotificationSpecsResult = NonNullable<
  Awaited<ReturnType<typeof getNotificationSpecs>>
>;
export type GetNotificationSpecResult = NonNullable<
  Awaited<ReturnType<typeof getNotificationSpec>>
>;
export type UpdateNotificationSpecResult = NonNullable<
  Awaited<ReturnType<typeof updateNotificationSpec>>
>;
export type DeleteNotificationSpecResult = NonNullable<
  Awaited<ReturnType<typeof deleteNotificationSpec>>
>;
